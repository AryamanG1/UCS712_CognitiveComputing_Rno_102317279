# -*- coding: utf-8 -*-
"""Aryaman_Gudwani_102317279_lab5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A8IqdFBrcpZ1o-QAKQrsV8xuXj1yH0qe
"""

# Q.1 For the array gfg = np.matrix('[4, 1, 9; 12, 3, 1; 4, 5, 6]'), Find
# i. Sum of all elements
# ii. Sum of all elements row-wise
# iii. Sum of all elements column-wise

import numpy as np

gfg = np.matrix([[4,1,9],[12,3,1],[4,5,6]])
print(gfg.sum())

for i in gfg:
  print(i.sum())

print(np.sum(gfg,axis=0))

# Q.2 (a)For the array: array = np.array([10, 52, 62, 16, 16, 54, 453]), find
# i. Sorted array
# ii. Indices of sorted array
# iii. 4 smallest elements
# iv. 5 largest elements
# (b) For the array: array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0]), find
# i. Integer elements only
# ii. Float elements only

import numpy as np

array = np.array([10, 52, 62, 16, 16, 54, 453])

arr_sorted=np.sort(array)
print(arr_sorted)

ind_sorted = np.argsort(array)
print(ind_sorted)

print(arr_sorted[:4])


print(arr_sorted[-5:])

array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])
ints = array[array==array.astype(int)]
print(ints)

floats = array[array!=array.astype(int)]
print(floats)

# Q.3 You are given a weekly sales dataset and need to perform various operations
# using NumPy broadcasting.
# a) Generate your unique sales dataset:
#  Take the sum of the ASCII values of the initials of your first and last
# name. Call this value X. (If your initials are A B → ASCII sum = 65
# + 66 = 131 → sales = [131, 181, 231, 281, 331].)
#  Create a NumPy array sales with values [X, X+50, X+100, X+150,
# X+200].
# b) Compute your personalized tax rate as ((X % 5) + 5) / 100.
#  Use broadcasting to apply this tax rate to each sales value.
# c) Adjust sales based on discount:
#  If sales < X+100, apply a 5% discount.
#  If sales >= X+100, apply a 10% discount.
# d) Expand sales data for multiple weeks:
#  Create a 3×5 matrix representing three weeks of sales by stacking
# sales three times using broadcasting.
#  Increase sales by 2% per week using element-wise broadcasting.

import numpy as np

base = ord('A') + ord('G')

sales = np.array([base, base + 50, base + 100, base + 150, base + 200])
print("Sales Data:", sales)

tax_percentage = ((base % 5) + 5) / 100
tax_values = sales * tax_percentage
print("Tax Rate:", tax_percentage)
print("Tax Amount:", tax_values)

adjusted_sales = np.where(sales < (base + 100), sales * 0.95, sales * 0.90)
print("Discounted Sales:", adjusted_sales)

weekly_sales_pattern = np.tile(adjusted_sales, (3, 1))
week_indices = np.arange(3).reshape(3, 1)
final_weekly_sales = weekly_sales_pattern * (1.02 ** week_indices)

print("Weekly Sales After Increase:\n", final_weekly_sales)

# Q4. Generate x values using np.linspace() from -10 to 10 with 100 points. Use
# each function from the list below and compute y values using NumPy:
#  Y = x2
#  Y = sin(x)
#  Y = ex
#  Y = log(|x| + 1)
# Plot the chosen function using Matplotlib. Add title, labels, and grid for clarity.

import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(-10, 10, 100)

y1 = x * x
y2 = np.sin(x)
y3 = np.exp(x)
y4 = np.log(np.abs(x) + 1)


plt.figure(figsize=(10, 6))
plt.plot(x, y1, label="x^2", color="blue")
plt.plot(x, y2, label="sin(x)", color="red")
plt.plot(x, y3, label="e^x", color="green")
plt.plot(x, y4, label="log(|x|+1)", color="purple")

plt.xlabel("X")
plt.ylabel("Y")
plt.title("Some Functions")
plt.legend()
plt.ylim(-2,10)
plt.grid(True)
plt.show()