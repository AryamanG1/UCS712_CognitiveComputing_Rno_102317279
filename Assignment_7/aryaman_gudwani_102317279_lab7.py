# -*- coding: utf-8 -*-
"""Aryaman_Gudwani_102317279_Lab7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Y-AbvOtr6vT1YPtX7bw-I778L4XT8IM
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

roll_num = 102317270
np.random.seed(roll_num)

monthly_sales = np.random.randint(1000, 5001, size=(12, 4))

month_labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
category_labels = ['Gadgets', 'Apparel', 'Furniture', 'Fitness']

dataframe_sales = pd.DataFrame(monthly_sales, index=month_labels, columns=category_labels)

dataframe_sales['Total_Revenue'] = dataframe_sales.sum(axis=1)
dataframe_sales['Growth_Percentage'] = dataframe_sales['Total_Revenue'].pct_change() * 100

if roll_num % 2 == 0:
    dataframe_sales['Gadgets_Adjusted'] = dataframe_sales['Gadgets'] * 0.88
else:
    dataframe_sales['Apparel_Adjusted'] = dataframe_sales['Apparel'] * 0.83

plt.figure(figsize=(10, 6))
for cat in dataframe_sales.columns[:-2]:
    plt.plot(dataframe_sales.index, dataframe_sales[cat], label=cat)

plt.title('Monthly Sales Performance')
plt.xlabel('Months')
plt.ylabel('Revenue')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(data=dataframe_sales.drop(columns=['Total_Revenue', 'Growth_Percentage']))
plt.title('Revenue Spread Across Categories')
plt.ylabel('Revenue')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import numpy as np

data_matrix = np.array([[2, -3, 4], [-5, 6, -7]])
absolute_values = np.abs(data_matrix)
print("Absolute Values:")
print(absolute_values)

flat_data = data_matrix.flatten()
percentiles = np.percentile(flat_data, [25, 50, 75])
print("\nPercentiles for flattened array:")
print(f"25th: {percentiles[0]}, 50th: {percentiles[1]}, 75th: {percentiles[2]}")

column_percentiles = np.percentile(data_matrix, [25, 50, 75], axis=0)
print("\nColumn-wise Percentiles:")
print(f"25th: {column_percentiles[0]}")
print(f"50th: {column_percentiles[1]}")
print(f"75th: {column_percentiles[2]}")

row_percentiles = np.percentile(data_matrix, [25, 50, 75], axis=1)
print("\nRow-wise Percentiles:")
print(f"25th: {row_percentiles[0]}")
print(f"50th: {row_percentiles[1]}")
print(f"75th: {row_percentiles[2]}")

mean_value = np.mean(flat_data)
median_value = np.median(flat_data)
std_dev = np.std(flat_data)

print("\nFlattened Array Statistics:")
print(f"Mean: {mean_value}, Median: {median_value}, Std Dev: {std_dev}")

col_mean = np.mean(data_matrix, axis=0)
col_median = np.median(data_matrix, axis=0)
col_std = np.std(data_matrix, axis=0)

print("\nColumn-wise Statistics:")
print(f"Mean: {col_mean}")
print(f"Median: {col_median}")
print(f"Std Dev: {col_std}")

row_mean = np.mean(data_matrix, axis=1)
row_median = np.median(data_matrix, axis=1)
row_std = np.std(data_matrix, axis=1)

print("\nRow-wise Statistics:")
print(f"Mean: {row_mean}")
print(f"Median: {row_median}")
print(f"Std Dev: {row_std}")

import numpy as np

values = np.array([-2.3, -1.5, -0.2, 0.4, 1.5, 2.7, 3.8])

floored = np.floor(values)
ceiled = np.ceil(values)
truncated = np.trunc(values)
rounded = np.round(values)

print("Original Array:", values)
print("Floored Values:", floored)
print("Ceiling Values:", ceiled)
print("Truncated Values:", truncated)
print("Rounded Values:", rounded)

def swap_positions(arr, pos1, pos2):
    if pos1 < len(arr) and pos2 < len(arr):
        arr[pos1], arr[pos2] = arr[pos2], arr[pos1]
        return arr
    return "Invalid indices."

data = [12, 24, 36, 48, 60]
index1, index2 = 1, 3
result = swap_positions(data, index1, index2)
print("Modified List:", result)

def modify_set_swap(original_set, idx1, idx2):
    temp_list = list(original_set)

    if idx1 < len(temp_list) and idx2 < len(temp_list):
        temp_list[idx1], temp_list[idx2] = temp_list[idx2], temp_list[idx1]
        return set(temp_list)
    return "Invalid indices."

num_set = {15, 25, 35, 45, 55}
position1, position2 = 1, 3
swapped_result = modify_set_swap(num_set, position1, position2)
print("Updated Set:", swapped_result)